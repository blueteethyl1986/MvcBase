@using Esmart.Permission.Web.Models.Common
@model Esmart.Framework.Model.SoaDataPageResponse<Esmart.Permission.Application.Models.ControlModel.UsersView>
<style>
    #main_content_table th, #main_content_table td { text-align: center; }
</style>
<table id="main_content_table" class="table table-hover table-bordered">
    <thead>
        <tr role="row">
           
            <th class="sorting" onclick="dataPage.sort('DeparentName',this)" style="width: 100px; border-bottom-color: rgb(221, 221, 221);">部门</th>
            <th class="sorting" onclick="dataPage.sort('WorkNo', this)" style="width: 100px; border-bottom-color: rgb(221, 221, 221);">工号</th>
            <th class="sorting" onclick="dataPage.sort('TrueName', this)" style="width: 100px; border-bottom-color: rgb(221, 221, 221);">真实姓名</th>
            <th class="sorting" onclick="dataPage.sort('Ename', this)" style="width: 100px; border-bottom-color: rgb(221, 221, 221);">英文姓名</th>
            <th class="sorting" onclick="dataPage.sort('Sex', this)" style="width: 100px; border-bottom-color: rgb(221, 221, 221);">性别</th>
            <th class="sorting" onclick="dataPage.sort('Email', this)" style="width: 160px; border-bottom-color: rgb(221, 221, 221);">电子邮箱</th>
            <th class="sorting" onclick="dataPage.sort('Mobile', this)" style="width: 120px; border-bottom-color: rgb(221, 221, 221);">手机号码</th>
            <th class="sorting" onclick="dataPage.sort('Isleave', this)" style="width: 100px; border-bottom-color: rgb(221, 221, 221);">状态</th>
            <th class="sorting_disabled" style="width: 100px; border-bottom-color: rgb(221, 221, 221);">用户角色</th>
            <th class="sorting_disabled" style="width: 10px; border-bottom-color: rgb(221, 221, 221);">&nbsp;</th>
        </tr>
    </thead>
    <tbody>
        @{
            bool res_update = ViewBag.Permission.Contains(PermissionCons.permission_user_update),
                res_delete = ViewBag.Permission.Contains(PermissionCons.permission_user_delete),
                res_password = ViewBag.Permission.Contains(PermissionCons.permission_user_password_reset),
                res_userLeave = ViewBag.Permission.Contains(PermissionCons.permission_user_leave);
        }
        @foreach (var item in Model.Body)
        {
            <tr ondblclick="editUser(@item.UserID)">

                <td>@item.DeparentName</td>
                <td id="workno">@item.WorkNo</td>
                <td>@item.TrueName</td>
                <td>@item.Ename</td>
                <td>@(item.Sex == 1 ? "女" : "男")</td>
                <td>@item.Email</td>
                <td>@item.Mobile</td>
                <td>
                    @if (item.Isleave == 1)
                    {
                        <span class="label label-danger">离职</span>
                    }
                    else
                    {
                        <span>在职</span>
                    }
                </td>
                <td>@item.RoleNames</td>
                <td>
                    <div class="dropdown">
                        <a class="btn dropdown-toggle" data-toggle="dropdown" href="javascript:;">
                            操作
                            <span class="caret"></span>
                        </a>
                        <ul class="dropdown-menu" aria-labelledby="dropdownMenu1">
                            @if (item.Isleave != 1 && res_update)
                            {
                                <li><a href="#" onclick="editUser(@item.UserID)">编辑</a></li>
                            }
                            @if (res_delete)
                            {
                                <li><a href="#" onclick="deleteUser(@item.UserID)">移出部门</a></li>
                            }
                            @if (item.Isleave != 1)
                            {
                                if (res_userLeave)
                                {
                                    <li><a href="#" onclick="userLeave(@item.UserID)">员工离职</a></li>
                                }
                                if (res_password)
                                {
                                    <li><a href="#" onclick="resetPwd(@item.UserID)">重置密码</a></li>
                                }
                                if (res_update)
                                {
                                    <li><a href="#" onclick="assignRole(@item.UserID)">分配角色</a></li>
                                    <li><a href="#" class="assignRights" itemid="@item.UserID" itemname="@item.TrueName">分配权限</a></li>
                                }
                            }
                        </ul>
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>

<script>

    dataPage.count=@Model.Count;

    //编辑用户
    function editUser(userId) {
        main.model('@Url.Action("UserEdit")?act=edit&id=' + userId, {
            title: '编辑用户',
            callback: function (resp) {
            }
        });
        return false;
    }
    //table加入checkbox
    function initTableCheckbox() {  
        var $thr = $('table thead tr');  
        var $checkAllTh = $('<th><input type="checkbox" id="checkAll" name="checkAll" /></th>');  
        /*将全选/反选复选框添加到表头最前，即增加一列*/  
        $thr.prepend($checkAllTh);  
        /*“全选/反选”复选框*/  
        var $checkAll = $thr.find('input');  
        $checkAll.click(function(event){  
            /*将所有行的选中状态设成全选框的选中状态*/  
            $tbr.find('input').prop('checked',$(this).prop('checked'));  
            /*并调整所有选中行的CSS样式*/  
            if ($(this).prop('checked')) {  
                $tbr.find('input').parent().parent().addClass('warning');  
            } else{  
                $tbr.find('input').parent().parent().removeClass('warning');  
            }  
            /*阻止向上冒泡，以防再次触发点击操作*/  
            event.stopPropagation();  
        });  
        /*点击全选框所在单元格时也触发全选框的点击操作*/  
        $checkAllTh.click(function(){  
            $(this).find('input').click();  
        });  
        var $tbr = $('table tbody tr');  
        var $checkItemTd = $('<td><input type="checkbox" name="checkItem" /></td>');  
        /*每一行都在最前面插入一个选中复选框的单元格*/  
        $tbr.prepend($checkItemTd);  
        /*点击每一行的选中复选框时*/  
        $tbr.find('input').click(function(event){  
            /*调整选中行的CSS样式*/  
            $(this).parent().parent().toggleClass('warning');  
            /*如果已经被选中行的行数等于表格的数据行数，将全选框设为选中状态，否则设为未选中状态*/  
            $checkAll.prop('checked',$tbr.find('input:checked').length == $tbr.length ? true : false);  
            /*阻止向上冒泡，以防再次触发点击操作*/  
            event.stopPropagation();  
        });  
        /*点击每一行时也触发该行的选中操作*/  
        $tbr.click(function(){  
            $(this).find('input').click();  
        });  
    }  
    initTableCheckbox();
    //获取checkbox选中的值
    function determine(){
        var data = "";
        $("tr").each(function(){
            var s = $(this);
            if(s.find('input[type="checkbox"]').is(":checked")){
                data=data+s.find("#workno").text()+",";
            }
        });
       
        return data;
    }
    //从部门中移除用户
    function deleteUser(userId) {
        var depId = $("#hidDepId").val();
        depId = parseInt(depId);
        if (depId === 0) {
            tpo.alert("没有找到部门");
            return;
        }
        tpo.confirm("是否确认从部门中移除此用户?", function (result) {
            if (result) {
                main.submit("@Url.Action("DeleteUser")", { userId: userId, depId: depId }, function (resp) {
                    dataPage.remove(1);
                });
            }
        });
    }
    //分配用户角色
    function assignRole(userId) {
        main.model('@Url.Action("AssignRole", "Department")?userId=' + userId, {
            title: '分配用户角色',
            initData: function (data) {
                var roleIds = [];
                $("#formAssigningRole input:checked").each(function () {
                    roleIds.push($(this).val());
                });
                data.userId = userId;
                data.roleIds = roleIds.join();
                return data;
            },
            callback: function (resp) {

            }
        });
        return false;
    }
    //重置密码
    function resetPwd(userId) {
        tpo.confirm("是否确认重置密码?", function (result) {
            if (result) {
                main.submit("@Url.Action("ResetUserPwd")", { userId: userId }, function (resp) {
                    tpo.alert("重置密码成功！");
                });
            }
        });
    }
    //用户离职
    function userLeave(userId) {
        tpo.confirm("是否确认将此用户状态变更为离职?", function (result) {
            if (result) {
                main.submit("@Url.Action("UserLeave")", { userId: userId }, function (resp) {
                    dataPage.search();
                });
            }
        });
    }

    $(".dropdown-menu .assignRights").click(function()
    {
        assignRights($(this).attr("itemid"),$(this).attr("itemname"));
    });
    
    function assignRights(userId,title)
    {
        main.model('@Url.Action("AssignRights", "Department")?userId=' + userId, {
            title: '【'+title + '】 -- 用户权限分配',
            initData: function (data) {
                var appId = $(".active[role='tabpanel']").attr("id");
                data.AppId = appId;
                data.UserId = userId;

                var activeTreeId = appId + "-tree";
                var pTree = $.fn.zTree.getZTreeObj(activeTreeId);
                var checkedNodes = pTree.getCheckedNodes(true);
                var i = 0;
                var j = 0;
                for (var key in checkedNodes) {
                    var node = checkedNodes[key];
                    if (node.category === 0) {
                        var menuParaName = "NavigationsCollection[" + i + "]";
                        data[menuParaName] = Number(node.id);
                        i++;
                    } else {
                        var funKeyName = "FunctionsCollection[" + j + "].Key";
                        var funValueName = "FunctionsCollection[" + j + "].Value";
                        var funId = node.id.split('-');

                        data[funKeyName] = Number(funId[0]);
                        data[funValueName] = Number(funId[1]);

                        j++;
                    }
                }
                return data;
            },
            callback: function (resp) {

            }
        });
        return false;
    }
</script>